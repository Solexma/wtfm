name: Rust CI/CD

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check if tag is on main
        run: |
          TAG_BRANCH=$(git branch -r --contains ${{ github.ref }} | grep 'origin/main' || true)
          if [ -z "$TAG_BRANCH" ]; then
            echo "Tag must be on main branch"
            exit 1
          fi
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Check formatting
        run: cargo fmt --all -- --check
        
      - name: Clippy
        run: cargo clippy -- -D warnings
        
      - name: Run tests
        run: cargo test --verbose

  build:
    needs: check
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: linux
            asset_name: wtfm
            zip_name: wtfm-linux.zip
          - os: windows-latest
            artifact_name: windows
            asset_name: wtfm.exe
            zip_name: wtfm-windows.zip
          - os: macos-latest
            artifact_name: macos
            asset_name: wtfm
            zip_name: wtfm-macos.zip

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build
      run: cargo build --verbose --release
    
    - name: Create ZIP (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/release
        zip ${{ matrix.zip_name }} ${{ matrix.asset_name }}
        
    - name: Create ZIP (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Compress-Archive -Path "target/release/${{ matrix.asset_name }}" -DestinationPath "target/release/${{ matrix.zip_name }}"
    
    - name: Run tests
      run: cargo test --verbose
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: target/release/${{ matrix.zip_name }}
        if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        
      - name: List files
        run: ls -R
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            **/wtfm-*.zip
          generate_release_notes: true
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
